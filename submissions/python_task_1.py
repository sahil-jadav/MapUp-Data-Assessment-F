# -*- coding: utf-8 -*-
"""python_task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C41np6R2lV5Ut-9lwkT0kptizyTwQBn-
"""

import pandas as pd

df = pd.read_csv('dataset-1.csv')

df1 = pd.read_csv('dataset-2.csv')



"""Question 1: Car Matrix Generation

"""

def generate_car_matrix(df):

    # Use pivot_table to create a DataFrame with 'id_1' as index, 'id_2' as columns, and 'car' as values
    new_df = df.pivot_table(index='id_1', columns='id_2', values='car', fill_value=0)

    return new_df

# Call the function
new_df = generate_car_matrix(df)

print(new_df)

"""Question 2: Car Type Count Calculation"""

def get_type_count(df):

    # Add a new column 'car_type' based on the conditions
    df['car_type'] = pd.cut(df['car'], bins=[-float('inf'), 15, 25, float('inf')], labels=['low', 'medium', 'high'])

    # Calculate the count of occurrences for each 'car_type' category
    type_counts = df['car_type'].value_counts().to_dict()

    return type_counts

type_counts = get_type_count(df)
print(type_counts)

"""Question 3: Bus Count Index Retrieval"""

def get_bus_indexes(df):

    # Calculate the mean value of the 'bus' column
    mean_bus = df['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean
    bus_indexes = df[df['bus'] > 2 * mean_bus].index.tolist()

    return bus_indexes

bus_indexes = get_bus_indexes(df)
print(bus_indexes)

"""Question 4: Route Filtering"""

def filter_routes(df):

    # Calculate the average 'truck' values for each 'route'
    route_avg_truck = df.groupby('route')['truck'].mean()

    # Filter routes where the average 'truck' value is greater than 7
    filtered_routes = route_avg_truck.loc[lambda x: x > 7].index.tolist()

    return filtered_routes

filtered_routes = filter_routes(df)
print(filtered_routes)

"""Question 5: Matrix Value Modification"""

def multiply_matrix(matrix):

    def modify_value(value):
        if value > 20:
            return round(value * 0.75, 1)
        else:
            return round(value * 1.25, 1)

    # Apply the modification function to each element in the DataFrame
    modified_matrix = matrix.applymap(modify_value)

    return modified_matrix

# new_dataframe from Question 1
new_df = generate_car_matrix(df)

# Call the multiply_matrix function
modified_dataframe = multiply_matrix(new_df)
print(modified_dataframe)

"""Question 6: Time Check"""

def time_check(df1):

    # Convert 'startDay' and 'endDay' columns to categorical type for proper sorting
    days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    df1['startDay'] = pd.Categorical(df1['startDay'], categories=days_order, ordered=True)
    df1['endDay'] = pd.Categorical(df1['endDay'], categories=days_order, ordered=True)

    # Convert 'startTime' and 'endTime' columns to datetime format
    df1['startTime'] = pd.to_datetime(df1['startTime'], format='%H:%M:%S').dt.time
    df1['endTime'] = pd.to_datetime(df1['endTime'], format='%H:%M:%S').dt.time

    # Create a pivot table to check coverage for each (`id`, `id_2`) pair
    pivot_table = df1.pivot_table(index=['id', 'id_2'], columns=['startDay', 'startTime', 'endDay', 'endTime'], aggfunc='count', fill_value=0)

    # Check if each (`id`, `id_2`) pair has correct timestamps
    is_correct = (pivot_table.sum(axis=1) == 168)  # 7 days * 24 hours = 168

    return is_correct

is_correct = time_check(df1)
print(is_correct)









